# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _extract_mvs
else:
    import _extract_mvs

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def extract_mvs(filename):
    return _extract_mvs.extract_mvs(filename)

def init_AVFormatContext():
    return _extract_mvs.init_AVFormatContext()

def init_AVCodec():
    return _extract_mvs.init_AVCodec()

def init_AVStream():
    return _extract_mvs.init_AVStream()

def init_AVCodecContext():
    return _extract_mvs.init_AVCodecContext()

def init_AVFrame():
    return _extract_mvs.init_AVFrame()

def init_AVDictionary():
    return _extract_mvs.init_AVDictionary()

def init_AVPacket():
    return _extract_mvs.init_AVPacket()

def free_AVFormatContext(arg1):
    return _extract_mvs.free_AVFormatContext(arg1)

def free_AVCodec(arg1):
    return _extract_mvs.free_AVCodec(arg1)

def free_AVStream(arg1):
    return _extract_mvs.free_AVStream(arg1)

def free_AVCodecContext(arg1):
    return _extract_mvs.free_AVCodecContext(arg1)

def free_AVFrame(arg1):
    return _extract_mvs.free_AVFrame(arg1)

def free_AVDictionary(arg1):
    return _extract_mvs.free_AVDictionary(arg1)

def free_AVPacket(object):
    return _extract_mvs.free_AVPacket(object)

def avformat_open_input_w(filename, fmt_ctx):
    return _extract_mvs.avformat_open_input_w(filename, fmt_ctx)

def avformat_find_stream_info_w(fmt_ctx):
    return _extract_mvs.avformat_find_stream_info_w(fmt_ctx)

def av_find_best_stream_w(fmt_ctx, dec):
    return _extract_mvs.av_find_best_stream_w(fmt_ctx, dec)

def av_get_stream(fmt_ctx, stream_idx, st):
    return _extract_mvs.av_get_stream(fmt_ctx, stream_idx, st)

def avcodec_alloc_context3_w(dec, dec_ctx):
    return _extract_mvs.avcodec_alloc_context3_w(dec, dec_ctx)

def avcodec_parameters_to_context_w(dec_ctx, st):
    return _extract_mvs.avcodec_parameters_to_context_w(dec_ctx, st)

def av_dict_set_w(opts):
    return _extract_mvs.av_dict_set_w(opts)

def avcodec_open2_w(dec_ctx, dec, opts):
    return _extract_mvs.avcodec_open2_w(dec_ctx, dec, opts)

def av_frame_alloc_w():
    return _extract_mvs.av_frame_alloc_w()

def av_read_frame_w(fmt_ctx, pkt):
    return _extract_mvs.av_read_frame_w(fmt_ctx, pkt)

def av_get_packet_stream_idx(pkt):
    return _extract_mvs.av_get_packet_stream_idx(pkt)

def avcodec_send_packet_w(dec_ctx, pkt):
    return _extract_mvs.avcodec_send_packet_w(dec_ctx, pkt)

def avcodec_receive_frame_w(dec_ctx, frame):
    return _extract_mvs.avcodec_receive_frame_w(dec_ctx, frame)

def av_is_error(ret):
    return _extract_mvs.av_is_error(ret)

def av_packet_unref_w(pkt):
    return _extract_mvs.av_packet_unref_w(pkt)

def read_frame(frame, width, height):
    return _extract_mvs.read_frame(frame, width, height)

def av_get_width(dec_ctx):
    return _extract_mvs.av_get_width(dec_ctx)

def av_get_height(dec_ctx):
    return _extract_mvs.av_get_height(dec_ctx)

